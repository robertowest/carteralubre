# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class ComunesComunicacion(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    texto = models.CharField(max_length=150)
    tipo = models.ForeignKey('ComunesDiccionario', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comunes_comunicacion'


class ComunesDepartamento(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    provincia = models.ForeignKey('ComunesProvincia', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'comunes_departamento'


class ComunesDiccionario(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    texto = models.CharField(max_length=150)
    tabla = models.CharField(max_length=45)

    class Meta:
        managed = False
        db_table = 'comunes_diccionario'


class ComunesDomicilio(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    tipo_calle = models.CharField(max_length=5)
    nombre = models.CharField(max_length=80, blank=True, null=True)
    numero = models.IntegerField(blank=True, null=True)
    piso = models.CharField(max_length=2, blank=True, null=True)
    puerta = models.CharField(max_length=2, blank=True, null=True)
    barrio = models.CharField(max_length=40, blank=True, null=True)
    provincia_texto = models.CharField(max_length=50, blank=True, null=True)
    departamento_texto = models.CharField(max_length=50, blank=True, null=True)
    localidad_texto = models.CharField(max_length=50, blank=True, null=True)
    observacion_texto = models.TextField(blank=True, null=True)
    tipo = models.ForeignKey(ComunesDiccionario, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comunes_domicilio'


class ComunesGeoref(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nivel = models.CharField(max_length=2)
    nombre = models.CharField(max_length=60)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comunes_georef'


class ComunesLocalidad(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    cod_postal = models.CharField(max_length=12, blank=True, null=True)
    cod_area_tel = models.CharField(max_length=4, blank=True, null=True)
    departamento = models.ForeignKey(ComunesDepartamento, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'comunes_localidad'


class ComunesMunicipio(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    departamento = models.ForeignKey(ComunesDepartamento, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'comunes_municipio'


class ComunesPais(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    cod_area_tel = models.CharField(max_length=4, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'comunes_pais'


class ComunesProvincia(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    pais = models.ForeignKey(ComunesPais, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'comunes_provincia'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class EmpresaActividad(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=50)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'empresa_actividad'


class EmpresaComercial(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    persona = models.ForeignKey('PersonaPersona', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_comercial'


class EmpresaComercialComunicaciones(models.Model):
    comercial = models.ForeignKey(EmpresaComercial, models.DO_NOTHING)
    comunicacion = models.ForeignKey(ComunesComunicacion, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_comercial_comunicaciones'
        unique_together = (('comercial', 'comunicacion'),)


class EmpresaComercialDomicilios(models.Model):
    comercial = models.ForeignKey(EmpresaComercial, models.DO_NOTHING)
    domicilio = models.ForeignKey(ComunesDomicilio, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_comercial_domicilios'
        unique_together = (('comercial', 'domicilio'),)


class EmpresaEmpresa(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=60)
    razon_social = models.CharField(unique=True, max_length=60)
    cuit = models.CharField(unique=True, max_length=13, blank=True, null=True)
    observacion = models.TextField(blank=True, null=True)
    referencia_id = models.IntegerField(unique=True, blank=True, null=True)
    origen = models.IntegerField(blank=True, null=True)
    planilla = models.IntegerField(blank=True, null=True)
    actividad = models.ForeignKey(EmpresaActividad, models.DO_NOTHING, blank=True, null=True)
    comercial = models.ForeignKey(EmpresaComercial, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'empresa_empresa'


class EmpresaEmpresaActividades(models.Model):
    empresa = models.ForeignKey(EmpresaEmpresa, models.DO_NOTHING)
    actividad = models.ForeignKey(EmpresaActividad, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_empresa_actividades'
        unique_together = (('empresa', 'actividad'),)


class EmpresaEmpresaComunicaciones(models.Model):
    empresa = models.ForeignKey(EmpresaEmpresa, models.DO_NOTHING)
    comunicacion = models.ForeignKey(ComunesComunicacion, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_empresa_comunicaciones'
        unique_together = (('empresa', 'comunicacion'),)


class EmpresaEmpresaContactos(models.Model):
    empresa = models.ForeignKey(EmpresaEmpresa, models.DO_NOTHING)
    persona = models.ForeignKey('PersonaPersona', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_empresa_contactos'
        unique_together = (('empresa', 'persona'),)


class EmpresaEmpresaDomicilios(models.Model):
    empresa = models.ForeignKey(EmpresaEmpresa, models.DO_NOTHING)
    domicilio = models.ForeignKey(ComunesDomicilio, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'empresa_empresa_domicilios'
        unique_together = (('empresa', 'domicilio'),)


class EmpresaSeguimiento(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    fecha = models.DateField()
    tipo_calle = models.SmallIntegerField()
    mensaje = models.TextField(blank=True, null=True)
    respuesta = models.TextField(blank=True, null=True)
    comercial = models.ForeignKey(EmpresaComercial, models.DO_NOTHING, blank=True, null=True)
    empresa = models.ForeignKey(EmpresaEmpresa, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'empresa_seguimiento'


class PersonaPersona(models.Model):
    active = models.IntegerField()
    created = models.DateTimeField(blank=True, null=True)
    created_by = models.CharField(max_length=15, blank=True, null=True)
    modified = models.DateTimeField(blank=True, null=True)
    modified_by = models.CharField(max_length=15, blank=True, null=True)
    nombre = models.CharField(max_length=40)
    apellido = models.CharField(max_length=40)
    documento = models.CharField(unique=True, max_length=12, blank=True, null=True)
    fecha_nacimiento = models.DateField(blank=True, null=True)
    persona_similar = models.IntegerField(blank=True, null=True)
    domicilio = models.ForeignKey(ComunesDomicilio, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'persona_persona'


class PersonaPersonaComunicaciones(models.Model):
    persona = models.ForeignKey(PersonaPersona, models.DO_NOTHING)
    comunicacion = models.ForeignKey(ComunesComunicacion, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'persona_persona_comunicaciones'
        unique_together = (('persona', 'comunicacion'),)
