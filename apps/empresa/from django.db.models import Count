match = resolve(request.path)
func, args, kwargs = match
view_info["view_func"] = get_name_from_obj(func)
view_info["view_args"] = args
view_info["view_kwargs"] = kwargs
view_info["view_urlname"] = getattr(match, "url_name", _("<unavailable>"))


(Pdb) from django.urls import resolve
(Pdb) print( resolve(self.request.path) )




from django.db.models import Count
from apps.empresa.models import Empresa
a=Empresa.objects.values('actividad__texto').annotate(contador=Count(id))
print(len(a))
print(a.query)



                                        {% if obj.comercial__persona is None %}
                                            No definido
                                        {% else %}
                                            {{obj.comercial__persona}}
                                        {% endif %}




                                    {% if obj.comercial is None %}
                                    <a href="{% url 'empresa:filtro_comercial' 0 %}">
                                    {% else %}
                                    <a href="{% url 'empresa:filtro_comercial' obj.comercial %}">
                                    {% endif %}                                    




    def get_queryset(self, *args, **kwargs):
        qs = super().get_queryset()
        # return qs.filter(name__startswith=self.kwargs['name'])
        # data = self.model.objects.values('actividad').annotate(contador=Count(id))
        import pdb; pdb.set_trace()
        return qs.values('actividad').annotate(contador=Count(id))

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(**kwargs)
        return context

    # def get_context_data(self, *args, **kwargs):
    #     # context = super().get_context_data(total_count=self.get_queryset().count(), **kwargs)
    #     # return context
    #     context = super().get_context_data(**kwargs)
    #     # context['object_list'] = models.Empresa.values('actividad').annotate(contador=Count(id))
    #     return context



    # def get_context_data(self, *, object_list=None, **kwargs):
    #     context = super().get_context_data(**kwargs)
    #     data = self.model.objects.values('actividad').annotate(contador=Count('actividad'))
    #     context['object_list'] = data
    #     return context